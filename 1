#include<iostream> 
#include<string.h>
using namespace std;
int const s=3;

struct student{
	char name[50];
	int  rollno;
	float sgpa;
};
void accept(struct student list[s]);
void display(struct student list[80]);
void bubblesort(struct student list[s]);
void insertionsort(struct student list[s]);
void quicksort(struct student list[s],int l,int r);
void linearsearch(struct student list[s]);
void binarysearch(struct student list[s]);

int main(){
	int choice,i,x;
	int size;
	struct student data[20];
	accept(data);
	do{
		cout<<"\n enter 1 for bubble sort:";
		cout<<"\n enter 2 for insertion sort";
		cout<<"\n enter 3 for quick sort:";
		cout<<"\n enter 4 for linear search";
		cout<<"\n enter 5 for binary search";
		cout<<"\n select your choice : ";
		cin>>choice;
		
		switch(choice){
			case 1:
				bubblesort(data);
				display(data);
				break;
			case 2:
			    insertionsort(data);
				display(data);
				break;
			case 3:
			    size=sizeof(data)/sizeof(data[0]);
				quicksort(data,0,s-1);
				display(data);
				break;
			case 4:
			    linearsearch(data);
				break;
			case 5:
			    binarysearch(data);
				break;
			default:
			   cout<<"--->> select valid choice <<---";					
		}
		cout<<"enter 1 to continue and 0 to exit:";
		cin>>x;
	}while(x!=0);
}
void accept(struct student list[s]){
	cout<<"enter the students detail";
	int i;
	for(i=0;i<s;i++)
	{
		cout<<endl;
		cout<<" Student "<<i+1<<endl;
		cout<<" enter the roll number: "<<endl;
		cin>>list[i].rollno;
		cout<<" enter the name: "<<endl;
		cin>>list[i].name;
		cout<<" enter the SGPA:"<<endl;
		cin>>list[i].sgpa;
	}
}
void display(struct student list[80]){
	int i;
	for(i=0;i<s;i++){
		cout << "------------------------------------"<<endl;
		cout<<" Name: "<<list[i].name<< endl;
		cout<<" rollno: "<<list[i].rollno<<endl;
		cout<<" sgpa: "<<list[i].sgpa<<endl;
		cout << "------------------------------------"<<endl;
	}
	
}
void bubblesort(struct student list[s]){
	int i,j;
	struct student temp;
	for(i=0;i<s-1;i++){
	for(j=0;j<(s-1-i);j++){
		if(list[j].rollno>list[j+1].rollno){
			temp=list[j];
			list[j]=list[j+1];
			list[j+1]=temp;
		}
	}	
	}
}
void insertionsort(struct student list[s]){
	int k,j;
	struct student temp;
	for(k=1;k<s;k++){
		temp=list[k];
		j=k-1;
		
		while(strcmp(list[j].name,temp.name)>0&&j>=0){
			list[j+1]=list[j];
			--j;
		}
		list[j+1]=temp;
	}
}
void swap(student list[],int i,int j){
	struct student temp=list[i];
	list[i]=list[j];
	list[j]=temp;
}
int partition(struct student list[],int l,int r){
	float pi=list[r].sgpa;
	int i=l-1;
	for(int j=l;j<r;j++){
		if(list[j].sgpa>=pi){
			i++;
			swap(list,i,j);
		}
	}
	swap(list,i+1,r);
	return i+1;
}
void quicksort(struct student list[],int l,int r){
	int pi;
	if(l<r){
		pi=partition(list,l,r);
		quicksort(list,l,pi-1);
		quicksort(list,pi+1,r);
	}
}
void linearsearch(struct student list[s]){
	float sgpa;
	int i;
	cout<<"\n enter SGPA";
	cin>>sgpa;
	for(i=0;i<s;i++){
		if(sgpa==list[i].sgpa)
		{
			cout<<"\n Name:"<<list[i].name<<endl;
			cout<<"\n Roll no:"<<list[i].rollno<<endl;
			cout<<"\n SGPA: "<<list[i].sgpa<<endl;
			
		}
	}
}
void binarysearch(struct student list[s]){
	int k,lower,upper,mid;
	char search[80];
	cout<<"\n enter name of student which you want to search :";
	cin>>search;
	
	lower=0;
	upper=s-1;
	mid=(lower+upper)/2;
	while(lower<=upper){
		if(strcmp(list[mid].name,search)<0)
		lower=mid+1;
		
		else if(strcmp(list[mid].name,search)==0){
			cout<<list[mid].rollno;
			cout<<list[mid].name;
			cout<<list[mid].sgpa;
			break;
		}
		else{
			upper=mid-1;
			mid=(lower+upper)/2;
		}
	}
	if(lower>upper)
	cout<<search<<"NOT FOUND IN LIST";
}
